/* 
 * DialMyCalls API
 *
 * The DialMyCalls API
 *
 * OpenAPI spec version: 2.0.1
 * Contact: support@dialmycalls.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package dialmycalls

import (
	"strings"
	"fmt"
	"errors"
	"net/url"
	"encoding/json"
)

type CallerIds struct {
	Configuration Configuration
}

func NewCallerIds() *CallerIds {
	configuration := NewConfiguration()
	return &CallerIds{
		Configuration: *configuration,
	}
}

func NewCallerIdsWithBasePath(basePath string) *CallerIds {
	configuration := NewConfiguration()
	configuration.BasePath = basePath

	return &CallerIds{
		Configuration: *configuration,
	}
}

/**
 * Add Caller ID
 * Add a caller ID. &lt;br&gt;&lt;br&gt; Returns a caller ID object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;New Number\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/callerid &#x60;&#x60;&#x60;
 *
 * @param createCallerIdParameters Request body
 * @return *Object
 */
func (a CallerIds) CreateCallerId(createCallerIdParameters CreateCallerIdParameters) (*Object, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/callerid"

	// verify the required parameter 'createCallerIdParameters' is set
	if &createCallerIdParameters == nil {
		return new(Object), nil, errors.New("Missing required parameter 'createCallerIdParameters' when calling CallerIds->CreateCallerId")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (api_key) required

	// set key with prefix in header
	headerParams["X-Auth-ApiKey"] = a.Configuration.GetAPIKeyWithPrefix("X-Auth-ApiKey")

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json", "application/xml",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	postBody = &createCallerIdParameters

	var successPayload = new(Object)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Add Caller ID (Unverified)
 * Initiate adding a new caller ID when you need to go through the verification process. You will receive a phone call at the phone number provided and will need to make a subsequent API call with the PIN code that you are provided. &lt;br&gt;&lt;br&gt; Returns a caller ID object on success, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;New Number\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/verify/callerid &#x60;&#x60;&#x60;
 *
 * @param createUnverifiedCallerIdParameters Request body
 * @return *Object
 */
func (a CallerIds) CreateUnverifiedCallerId(createUnverifiedCallerIdParameters CreateUnverifiedCallerIdParameters) (*Object, *APIResponse, error) {

	var httpMethod = "Post"
	// create path and map variables
	path := a.Configuration.BasePath + "/verify/callerid"

	// verify the required parameter 'createUnverifiedCallerIdParameters' is set
	if &createUnverifiedCallerIdParameters == nil {
		return new(Object), nil, errors.New("Missing required parameter 'createUnverifiedCallerIdParameters' when calling CallerIds->CreateUnverifiedCallerId")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (api_key) required

	// set key with prefix in header
	headerParams["X-Auth-ApiKey"] = a.Configuration.GetAPIKeyWithPrefix("X-Auth-ApiKey")

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json", "application/xml",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	postBody = &createUnverifiedCallerIdParameters

	var successPayload = new(Object)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Delete Caller ID
 * Delete a caller ID. &lt;br&gt;&lt;br&gt; Returns the following if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X DELETE https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID &#x60;&#x60;&#x60;
 *
 * @param calleridId CalleridId
 * @return *Object
 */
func (a CallerIds) DeleteCallerIdById(calleridId string) (*Object, *APIResponse, error) {

	var httpMethod = "Delete"
	// create path and map variables
	path := a.Configuration.BasePath + "/callerid/{CalleridId}"
	path = strings.Replace(path, "{"+"CalleridId"+"}", fmt.Sprintf("%v", calleridId), -1)

	// verify the required parameter 'calleridId' is set
	if &calleridId == nil {
		return new(Object), nil, errors.New("Missing required parameter 'calleridId' when calling CallerIds->DeleteCallerIdById")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (api_key) required

	// set key with prefix in header
	headerParams["X-Auth-ApiKey"] = a.Configuration.GetAPIKeyWithPrefix("X-Auth-ApiKey")

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json", "application/xml",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(Object)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Get Caller ID
 * Retrieve a caller ID. &lt;br&gt;&lt;br&gt; Returns a caller ID object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID &#x60;&#x60;&#x60;
 *
 * @param calleridId CalleridId
 * @return *Object
 */
func (a CallerIds) GetCallerIdById(calleridId string) (*Object, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/callerid/{CalleridId}"
	path = strings.Replace(path, "{"+"CalleridId"+"}", fmt.Sprintf("%v", calleridId), -1)

	// verify the required parameter 'calleridId' is set
	if &calleridId == nil {
		return new(Object), nil, errors.New("Missing required parameter 'calleridId' when calling CallerIds->GetCallerIdById")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (api_key) required

	// set key with prefix in header
	headerParams["X-Auth-ApiKey"] = a.Configuration.GetAPIKeyWithPrefix("X-Auth-ApiKey")

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json", "application/xml",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	var successPayload = new(Object)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * List Caller IDs
 * Retrieve a list of caller IDs. &lt;br&gt;&lt;br&gt; Returns a list of caller ID objects. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X GET https://$API_KEY@api.dialmycalls.com/2.0/callerids &#x60;&#x60;&#x60;
 *
 * @param range_ Range (ie \&quot;records&#x3D;201-300\&quot;) of callerids requested
 * @return *Object
 */
func (a CallerIds) GetCallerIds(range_ string) (*Object, *APIResponse, error) {

	var httpMethod = "Get"
	// create path and map variables
	path := a.Configuration.BasePath + "/callerids"


	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (api_key) required

	// set key with prefix in header
	headerParams["X-Auth-ApiKey"] = a.Configuration.GetAPIKeyWithPrefix("X-Auth-ApiKey")

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json", "application/xml",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}

	// header params "Range"
	headerParams["Range"] = range_

	var successPayload = new(Object)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Update Caller ID
 * Update an existing caller ID. &lt;br&gt;&lt;br&gt; Returns a caller ID object if a valid identifier was provided and input validation passed, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X PUT -d \&quot;{\\\&quot;name\\\&quot;: \\\&quot;New Number Updated\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/callerid/$CALLERID_ID &#x60;&#x60;&#x60;
 *
 * @param updateCallerIdByIdParameters Request body
 * @param calleridId CalleridId
 * @return *Object
 */
func (a CallerIds) UpdateCallerIdById(updateCallerIdByIdParameters UpdateCallerIdByIdParameters, calleridId string) (*Object, *APIResponse, error) {

	var httpMethod = "Put"
	// create path and map variables
	path := a.Configuration.BasePath + "/callerid/{CalleridId}"
	path = strings.Replace(path, "{"+"CalleridId"+"}", fmt.Sprintf("%v", calleridId), -1)

	// verify the required parameter 'updateCallerIdByIdParameters' is set
	if &updateCallerIdByIdParameters == nil {
		return new(Object), nil, errors.New("Missing required parameter 'updateCallerIdByIdParameters' when calling CallerIds->UpdateCallerIdById")
	}
	// verify the required parameter 'calleridId' is set
	if &calleridId == nil {
		return new(Object), nil, errors.New("Missing required parameter 'calleridId' when calling CallerIds->UpdateCallerIdById")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (api_key) required

	// set key with prefix in header
	headerParams["X-Auth-ApiKey"] = a.Configuration.GetAPIKeyWithPrefix("X-Auth-ApiKey")

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json", "application/xml",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	postBody = &updateCallerIdByIdParameters

	var successPayload = new(Object)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

/**
 * Verify Caller ID
 * Verify a new caller ID. &lt;br&gt;&lt;br&gt; Returns a caller ID object if a valid identifier was provided, and returns an error otherwise. &lt;br&gt;&lt;br&gt; &#x60;&#x60;&#x60; curl -i -H \&quot;Content-Type: application/json\&quot; -X POST -d \&quot;{\\\&quot;phone\\\&quot;: \\\&quot;5555555555\\\&quot;, \\\&quot;name\\\&quot;: \\\&quot;New Number\\\&quot;}\&quot; https://$API_KEY@api.dialmycalls.com/2.0/verify/callerid/$CALLERID_ID &#x60;&#x60;&#x60;
 *
 * @param verifyCallerIdByIdParameters Request body
 * @param calleridId CalleridId
 * @return *Object
 */
func (a CallerIds) VerifyCallerIdById(verifyCallerIdByIdParameters VerifyCallerIdByIdParameters, calleridId string) (*Object, *APIResponse, error) {

	var httpMethod = "Put"
	// create path and map variables
	path := a.Configuration.BasePath + "/verify/callerid/{CalleridId}"
	path = strings.Replace(path, "{"+"CalleridId"+"}", fmt.Sprintf("%v", calleridId), -1)

	// verify the required parameter 'verifyCallerIdByIdParameters' is set
	if &verifyCallerIdByIdParameters == nil {
		return new(Object), nil, errors.New("Missing required parameter 'verifyCallerIdByIdParameters' when calling CallerIds->VerifyCallerIdById")
	}
	// verify the required parameter 'calleridId' is set
	if &calleridId == nil {
		return new(Object), nil, errors.New("Missing required parameter 'calleridId' when calling CallerIds->VerifyCallerIdById")
	}

	headerParams := make(map[string]string)
	queryParams := url.Values{}
	formParams := make(map[string]string)
	var postBody interface{}
	var fileName string
	var fileBytes []byte
	// authentication (api_key) required

	// set key with prefix in header
	headerParams["X-Auth-ApiKey"] = a.Configuration.GetAPIKeyWithPrefix("X-Auth-ApiKey")

	// add default headers if any
	for key := range a.Configuration.DefaultHeader {
		headerParams[key] = a.Configuration.DefaultHeader[key]
	}


	// to determine the Content-Type header
	localVarHttpContentTypes := []string{ "application/json", "application/xml",  }

	// set Content-Type header
	localVarHttpContentType := a.Configuration.APIClient.SelectHeaderContentType(localVarHttpContentTypes)
	if localVarHttpContentType != "" {
		headerParams["Content-Type"] = localVarHttpContentType
	}
	// to determine the Accept header
	localVarHttpHeaderAccepts := []string{
		"application/json",
"application/xml",
	}

	// set Accept header
	localVarHttpHeaderAccept := a.Configuration.APIClient.SelectHeaderAccept(localVarHttpHeaderAccepts)
	if localVarHttpHeaderAccept != "" {
		headerParams["Accept"] = localVarHttpHeaderAccept
	}
	// body params
	postBody = &verifyCallerIdByIdParameters

	var successPayload = new(Object)
	httpResponse, err := a.Configuration.APIClient.CallAPI(path, httpMethod, postBody, headerParams, queryParams, formParams, fileName, fileBytes)
	if err != nil {
		return successPayload, NewAPIResponse(httpResponse.RawResponse), err
	}
	err = json.Unmarshal(httpResponse.Body(), &successPayload)
	return successPayload, NewAPIResponse(httpResponse.RawResponse), err
}

